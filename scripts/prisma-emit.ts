#!/usr/bin/env ts-node
import { getDMMF } from '@prisma/internals'
import { writeFileSync, readFileSync } from 'fs'
import { resolve } from 'path'
import yargs from 'yargs'

async function main() {
  const argv = await yargs()
    .option('schema', {
      alias: 's',
      type: 'string',
      description: 'Path to your schema.prisma',
      default: 'prisma/schema.prisma',
    })
    .help()
    .parseAsync()

  const schemaPath = resolve(process.cwd(), argv.schema)
  const datamodel = readFileSync(schemaPath, 'utf-8')

  // 1. load schema via datamodel content
  const dmmf = await getDMMF({ datamodel })

  // 2. collect all model names
  const models = dmmf.datamodel.models.map((m) => m.name)

  // 3. build the declarations
  const lines = [
    `// Generated by prisma-emit, do not edit`,
    `import { Prisma } from '@prisma/client'`,
    ``,
    `declare module '@prisma/client' {`,
    `  namespace Prisma {`,
  ]

  for (const model of models) {
    for (const op of ['Create', 'Update', 'Upsert'] as const) {
      lines.push(
        `    interface ${model}${op}Args {`,
        `      emit?: boolean`,
        `    }`
      )
    }
  }

  lines.push(`  }`, `}`)

  // 4. write to your types folder
  const outPath = resolve(process.cwd(), 'types', 'prisma-emit.d.ts')
  writeFileSync(outPath, lines.join('\n') + '\n')
  console.log(`âœ…  Generated ${outPath}`)
}

main().catch((e) => {
  console.error(e)
  process.exit(1)
})
